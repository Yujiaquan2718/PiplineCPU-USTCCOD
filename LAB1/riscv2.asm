.globl _start

_start:
    # 确保N的值保存在x10中，由于N的初始值保存在x2中，我们将其复制到x10
    andi x2, x2, 0
    addi x2, x2, 69
    addi x10, x2, 0   # 将N的值从x2复制到x10
# 初始化
    addi x1, x0, 0    # 前一个数的低32位，F(0)
    addi x2, x0, 0    # 前一个数的高32位
    addi x3, x0, 1    # 当前数的低32位，F(1)
    addi x4, x0, 0    # 当前数的高32位
    addi x5, x0, 1    # 计数器，从2开始
    li x6, 1          # 进位标志，初始化为1，用于计算过程中的进位处理

fib_loop:
    # 检查是否已经计算到第N项
    bge x5, x10, end  # 如果已经计算到第N项，则跳到结束

    # 计算下一个斐波那契数的低32位和高32位
    add x7, x1, x3    # 低32位相加
    sltu x8, x7, x1   # 如果x7 < x1，则表示发生了进位
    add x9, x2, x4    # 高32位相加
    add x9, x9, x8    # 将低32位的进位加到高32位的结果中

    # 更新前一个数和当前数的值
    addi x1, x3, 0    # 更新前一个数的低32位
    addi x2, x4, 0    # 更新前一个数的高32位
    addi x3, x7, 0    # 更新当前数的低32位
    addi x4, x9, 0    # 更新当前数的高32位

    addi x5, x5, 1    # 计数器加1

    j fib_loop        # 跳回循环开始

end:
    # 结果的高32位保存在x4中，低32位保存在x3中
    # 结束程序
ebreak
